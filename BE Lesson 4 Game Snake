#include <iostream>
#include <windows.h>
#include <cstring>    // модуль для работы состроками
#include <stdio.h>
//#include <cstdio.h>  //|4|fatal error: cstdio.h: No such file or directory|

using namespace std;

void MoveXY(int x, int y)
{
    COORD pos;
    pos.X = x;
    pos.Y = y;
    SetConsoleCursorPosition (GetStdHandle(STD_OUTPUT_HANDLE),pos);
}

// Структура для работы с картой.
#define mWidth 80       // Размер консольного окна в символах.
#define mHeight 25

struct TMap{
    char map1[mHeight][mWidth+1];
    void Clear();
    void Show();
};

// Направления Движения
enum TDirection {dirLeft, dirRight, dirUp, dirDown};
enum TResult {reOk, reKill};
//TResult - тип результата для функции управления змейкой.
//Состояния змейки: reOk - все хорошо, змейка жива
//reKill - Змейка погибла

#define sLen 1000  // sLen - max. lenght of Snakes tail

class TSnake {
    int x,y;            // Положние головы змейки
    TMap *mp;           //*mp - карта на которой будем рисовать змейку
    TDirection dir;     //dir-Текущее направение движения змейки
    POINT tail[sLen];   // tail - Массив с координатами каждого элемента хвоста
    int len;            // текущая длинна хвоста
    int score;          //подсчет очков
    POINT OutTextPos;


public:
    void AddTail(int _x, int _y);    // метод добавляет 1 елемент к хвосту змейки.
    void MoveTail(int _x, int _y);  // метод предвигает хвост змейки
    void AddTailCnt(int _x, int _y,int cnt);

    TSnake(TMap *_mp, int outX, int outY);     // конструктор,  которому мы предаем карту, на котрой нужно рисовать Змейку

    //Метод инициализации устанавливает начальное положение и направление З
    void Init(int _x,int _y, TDirection _dir);
    void PutOnMap();  // Этот методпомещает змейку на карту.
    // Метод управлния движением змейки
    TResult UserControl(char w, char s, char a, char d);
    void IncScore();

};

void TSnake :: IncScore()
{
    score++;
}



void TSnake::AddTailCnt(int _x, int _y,int cnt)
 {
     for (int i =0; i<cnt; i++)
            AddTail(_x, _y);
 }


void TSnake::MoveTail(int _x, int _y)
{
    for (int i = len - 1; i>=0; i--)
        tail[i+1] = tail[i];
    tail[0].x = _x;
    tail[0].y = _y;
}

void TSnake::AddTail(int _x, int _y)
{
    MoveTail(_x, _y);
    len++;
    if (len>=sLen) len = sLen-1;
}


TResult TSnake:: UserControl(char w, char s, char a, char d)
{
    POINT old;   // old - позиция голвы до перемещения
    old.y = y;   // именно туда будем добавлять новыйэлемент хвоста
    old.x = x;

    if(GetKeyState(w)<0) dir = dirUp;
    if(GetKeyState(s)<0) dir = dirDown;
    if(GetKeyState(a)<0) dir = dirLeft;
    if(GetKeyState(d)<0) dir = dirRight;

    if (dir == dirLeft) x--;
    if (dir == dirRight) x++;
    if (dir == dirUp) y--;
    if (dir == dirDown) y++;

    if((x<0)||(x >= mWidth)||
       (y<0)||(y >= mHeight)||
       (mp->map1[y][x] == '+'))

        return reKill;

   // Условие удлинения хвоста
    if (mp-> map1[y][x] == '*')
        AddTailCnt(old.x,old.y,5);
    else
    MoveTail(old.x,old.y);

    return reOk;


}



// Метод инициализации - передаем начальноеположение и направление
void TSnake:: Init(int _x, int _y, TDirection _dir)
{
    x= _x;
    y= _y;
    dir = _dir;     //   направлние движения
    len = 0;        //  длинна хвоста
}

// Помещаем Змейку на карту символ @ - голова змейки
void TSnake::PutOnMap()
{
          // Вывод очков на экран
    char str[10];
    sprintf(str, "%d", score);
    for (int i =0; i < strlen(str); i++)
        mp-> map1[OutTextPos.y][OutTextPos.x+i] = str[i];

    // Рисуем Змейку, Голову@ и хвост
    mp->map1[y][x] = '@';
    for (int i=0; i< len; i++)
        mp->map1[tail[i].y][tail[i].x] = '+';



}

TSnake ::TSnake(TMap *_mp, int outX, int outY)  //Consructor
{
    mp=_mp;                 //Обозначаем карту на котрой будем рисовать Змейку
    Init(0,0,dirRight);     // Проводим базовую иициализацию

    // Подсчет очков
    score = 0;
    OutTextPos.x = outX;
    OutTextPos.y = outY;


}


void TMap::Show()
{
    MoveXY(0,0);
    map1[mHeight-1][mWidth-1] = '\0';
    for (int j = 0; j < mHeight; j++)
        cout << map1[j];
}

void TMap::Clear()
{
    for (int i = 0; i< mWidth; i++) // Заполняем нулевую строку пробелами
        map1[0][i]= ' ';            //
    map1[0][mWidth] = '\0';         // Конец нулевой строки заполняем символом конца строки

    for (int j=1; j< mHeight; j++)         //Копируем нулевую строку
        strncpy(map1[j], map1[0], mWidth+1); //На всю остальную высоту каоты.

//Это яблоки на карте, которые должна съесть змейка что бы вырасти.
    map1[12][20] = '*';
    map1[12][60] = '*';
    map1[5][40] = '*';
    map1[20][40] = '*';
}




int main()
{
    int userCnt = 2;
    TMap map1;
    TSnake snake1(&map1, 3, 1);       // В конструктор мы пердаем указатель на карту
    snake1.Init(10,5,dirRight); // Задаем начальное положение и направление Змейки

    TSnake snake2(&map1, 77, 1);
    snake2.Init(70,5,dirLeft);
    // snake1.AddTail(3,3); // Test code
    //snake1.AddTail(3,4);  // Test code
    //snake1.AddTail(3,5);

    do
    {
        bool kill1 = snake1.UserControl ('W','S','A','D') == reKill;
        if ( (kill1)
           ||( (userCnt>=2)
              && (snake2.UserControl(VK_UP,VK_DOWN,VK_LEFT,VK_RIGHT) == reKill))
            )
       {
            snake1.Init(10,5,dirRight);
            snake2.Init(70,5,dirLeft);
            if (kill1)
                snake2.IncScore();
            else
                snake1.IncScore();

       }

        map1.Clear();
        snake1.PutOnMap();
        if (userCnt>=2) snake2.PutOnMap();
        map1.Show();
        Sleep(160);
    }
    while (GetKeyState(VK_ESCAPE)>=0);



    cout << "Hello world!" << endl;
    return 0;
}
